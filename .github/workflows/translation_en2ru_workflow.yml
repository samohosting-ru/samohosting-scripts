#translation_en2ru and url update for all .sh
name: translation_en2ru

on:
  workflow_dispatch:
jobs:
  sync-repo:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout your repository
      uses: actions/checkout@v4
   
    - name: Set up Git and add upstream
      run: |
        git config user.name 'samohosting'
        git config user.email 'email@samohosting.ru'
        git remote add samohosting-scripts https://github.com/samohosting-ru/samohosting-scripts.git

    - name:  translation_en2ru
      run: |
        git pull
        git switch dev
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|"${CREATING}${GN}${APP} setup has been successfully initialized!${CL}"|"${CREATING}${GN}${APP} Установка успешно завершена!${CL}"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|"${INFO}${YW} Access it using the following URL:${CL}"|"${INFO}${YW} Сервис доступен по ссылке URL:${CL}"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|echo -e "${CROSS}${RD} Menu aborted by user.${CL}"|echo -e "${CROSS}${RD} Меню отменено пользователем.${CL}"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|echo -e "ID '$CTID' is already in use."|echo -e "ID '$CTID' уже занят другим контейнером."|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|exit "A problem occured while trying to create container."|exit "Возникла проблема при попытке создать контейнер!"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|exit "Cannot use ID that is already in use."|exit "Не могу использовать ID который уже занят другим контейнером."|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|exit "Unable to find a template when searching for '$TEMPLATE_SEARCH'."|exit "Не смог найти ШАБЛОН для '$TEMPLATE_SEARCH'."|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_error "No ${APP} Installation Found!"|msg_error "Отсутствует установленная версия ${APP}"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_error "Ther is currently no automatic update function for ${APP}."|msg_error "Автообновления для ${APP} на текущий момент еще не существует."|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_error "Unable to detect a valid Container Storage location."|msg_error "Не удалось определить корректное расположение хранилища для контейнера"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_error "Unable to detect a valid Template Storage location."|msg_error "Не удалось определить корректное расположение хранилища для шаблона"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_info "Backing up conf.yml"|msg_info "Делаю резервную копию Вашего файла conf.yml"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_info "Cleaning Up"|msg_info "Провожу уборку. Удаляю временные файлы установки"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_info "Cleaning"|msg_info "Провожу уборку. Удаляю временные файлы установки"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_info "Creating LXC Container"|msg_info "Создаю LXC Контейнер"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_info "Downloading LXC Template"|msg_info "Скачиваю LXC Шаблон"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_info "Restoring assets directory"|msg_info "Происходит восстановление каталогов"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_info "Restoring conf.yml"|msg_info "Восстанавливаю из бекапа Ваш conf.yml"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_info "Starting|msg_info "Запускаю|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_info "Starting ${APP}"|msg_info "Запускается приложение ${APP}"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_info "Stopping ${APP}"|msg_info "Останавливаю работу приложения ${APP}"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_info "Updating ${APP} to ${RELEASE}"|msg_info "Обновляю ${APP} до ${RELEASE}"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_info "Updating ${APP}"|msg_info "Обновляю ${APP}"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_info "Updating |msg_info "Обновляю|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_info "Updating LXC Template List"|msg_info "Обновляю список LXC Шаблонов"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_info "Updating System"|msg_info "Обновляю систему"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_info "Validating Storage"|msg_info "Проверяю Хранилище"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_ok "Backed up conf.yml"|msg_ok "Забекапировал Ваш conf.yml"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_ok "Cleaned"|msg_ok "Все убрал, руки помыл. А не мытым трубочистам - стыд и срам(c)"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_ok "Cleanup Completed"|msg_ok "Все убрал, руки помыл. А не мытым трубочистам - стыд и срам(c)"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_ok "Completed Successfully!\\n"|msg_ok "Установка успешно завершена!\\n"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_ok "Downloaded LXC Template"|msg_ok "Скачиваю LXC Шаблон"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_ok "LXC Container ${BL}$CTID${CL} ${GN}was successfully created."|msg_ok "LXC Контейнер ${BL}$CTID${CL} ${GN}был успешно создан."|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_ok "No update required. ${APP} images are already at ${IMG_RELEASE}"|msg_ok "Обновление не требуется. ${APP} уже последней версии ${IMG_RELEASE}"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_ok "No update required. ${APP} is already at ${RELEASE}"|msg_ok "Обновление не требуется. ${APP} уже последней версии ${RELEASE}"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_ok "No update required. ${APP} is already at v${RELEASE}."|msg_ok "Обновление не требуется. ${APP} уже последней версии ${RELEASE}."|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_ok "No update required. Base ${APP} is already at ${RELEASE}"|msg_ok "Обновление не требуется. База приложение ${APP} уже последней версии ${RELEASE}"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_ok "Restored assets directory"|msg_ok "Каталоги восстановлены"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_ok "Started|msg_ok "Запустил|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_ok "Started ${APP}"|msg_ok "Запущено приложение ${APP}"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_ok "Started Dashy"|msg_ok "Стартую приложение Dashy"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_ok "Stopped ${APP}"|msg_ok "Приложение ${APP} остановлено"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_ok "Successfully Updated ${APP}"|msg_ok "Успешно обновлено ${APP}"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_ok "Updated ${APP} to ${RELEASE}"|msg_ok "Приложение ${APP} обновлено до версии ${RELEASE}"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_ok "Updated $APP LXC"|msg_ok "Обновлен Контейнер приложения $APP"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_ok "Updated LXC Template List"|msg_ok "Обновлен список LXC Шаблонов"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_ok "Updated PHP"|msg_ok "Обновлен PHP"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_ok "Updated Successfully"|msg_ok "Приложение успешно обновлено!"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_ok "Updated System"|msg_ok "Система обновлена"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_ok "Updating |msg_ok "Обновляю  |g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_ok "Using ${BL}$CONTAINER_STORAGE${CL} ${GN}for Container Storage."|msg_ok "Использую ${BL}$CONTAINER_STORAGE${CL} ${GN} для хранилища Контейнера."|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_ok "Using ${BL}$TEMPLATE_STORAGE${CL} ${GN}for Template Storage."|msg_ok "Использую ${BL}$TEMPLATE_STORAGE${CL} ${GN} для хранилища Шаблона."|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|You need to set 'CTID' variable.|Требуется задать переменную 'CTID'.|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|You need to set 'PCT_OSTYPE' variable.|Требуется задать переменную 'PCT_OSTYPE'.|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|backtitle "Proxmox VE Helper Scripts"|backtitle "Proxmox VE Helper Scripts | Samohosting Edition"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|title "SUPPORT"|title "ПОДДЕРЖКА"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|"Check for Alpine Updates"|"Проверка обновлений Alpine"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|msg_error "There is currently no update path available."|msg_error "Обновления отсутствуют."|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|error_message="${RD}[ERROR]${CL} in line ${RD}$line_number${CL}: exit code ${RD}$exit_code${CL}: while executing command ${YW}$command${CL}"|error_message="${RD}[ERROR]${CL} в строке ${RD}$line_number${CL}: exit code ${RD}$exit_code${CL}: во время выполнения команды ${YW}$command${CL}"|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|https://raw.githubusercontent.com/community-scripts/ProxmoxVE/main/misc/build.func|https://MY_LIINK/build.func|g' {} +
        find ./ -type f \( -name "*.*" \) -exec sed -i 's|https://github.com/community-scripts/ProxmoxVE/raw/main/LICENSE|https://MY_LIINK/LICENSE|g' {} +

        echo "info: translation done"
        git add . && echo "info: DONE add . $(date +'%Y-%m-%d %H:%M:%S')"
        git commit -m "repo was translated en2ru by workflow: $(date +'%Y-%m-%d %H:%M:%S')" && echo "info: Committed changes $(date +'%Y-%m-%d %H:%M:%S')"
        git push -u samohosting-scripts dev:ru_dev && echo "info: pushed translated repo en2ru by workflow $(date +'%Y-%m-%d %H:%M:%S')"
