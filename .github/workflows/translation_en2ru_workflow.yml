#translation_en2ru and url update for all .sh
name: translation_en2ru

on:
  workflow_dispatch:
jobs:
  sync-repo:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout your repository
      uses: actions/checkout@v4
   
    - name: Set up Git and add upstream
      run: |
        git config user.name 'samohosting'
        git config user.email 'email@samohosting.ru'
        git remote add samohosting-scripts https://github.com/samohosting-ru/samohosting-scripts.git

    - name:  translation_en2ru
      run: |
        git pull
        git switch ru_dev
        find ./ -type f \( -name "build.func" \) -exec sed -i 's|# License: MIT|# License: MIT\n# Translation: Samohosting.ru|g' {} +
        find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|https://raw.githubusercontent.com/community-scripts/ProxmoxVE/main/misc/build.func|https://raw.githubusercontent.com/samohosting-ru/samohosting-scripts/refs/heads/ru_dev/misc/build.func|g' {} +
        find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|https://github.com/community-scripts/ProxmoxVE/raw/main/LICENSE|https://raw.githubusercontent.com/samohosting-ru/samohosting-scripts/refs/heads/ru_dev/LICENSE|g' {} +
        find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|https://raw.githubusercontent.com/community-scripts/ProxmoxVE/main/misc/alpine-install.func|https://raw.githubusercontent.com/community-scripts/ProxmoxVE/main/misc/alpine-install.func|g' {} +
        find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|https://raw.githubusercontent.com/community-scripts/ProxmoxVE/main/misc/install.func|https://raw.githubusercontent.com/community-scripts/ProxmoxVE/main/misc/install.func|g' {} +
        find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|https://raw.githubusercontent.com/community-scripts/ProxmoxVE/main/ct/create_lxc.sh)"|https://raw.githubusercontent.com/community-scripts/ProxmoxVE/main/ct/create_lxc.sh)"|g' {} +
        find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|https://raw.githubusercontent.com/community-scripts/ProxmoxVE/main/install/$var_install.sh)"|https://raw.githubusercontent.com/community-scripts/ProxmoxVE/main/install/$var_install.sh)"|g' {} +
        find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|href='https://Helper-Scripts.com'|href='https://www.samohosting.ru'|g' {} +
        find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|src='https://raw.githubusercontent.com/community-scripts/ProxmoxVE/main/misc/images/logo-81x112.png'|src='https://raw.githubusercontent.com/LiaGen/samohosting/refs/heads/main/logo%20helper%20scripts%20samohosting%20edition.png'|g' {} +
        find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|href='https://ko-fi.com/community_scripts'|href='https://boosty.to/liagen/donate'|g' {} +
        find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|src='https://img.shields.io/badge/&#x2615;-Buy us a coffee-blue' alt='spend Coffee'|src='https://img.shields.io/badge/&#f15f2c;-boosty-orange' alt='boosty support'|g' {} +
        find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|href='https://github.com/community-scripts/ProxmoxVE' target='_blank' rel='noopener noreferrer' style='text-decoration: none; color: #00617f;'>GitHub|href='https://t.me/samohosting' target='_blank' rel='noopener noreferrer' style='text-decoration: none; color: #0088cc;'>Telegram|g' {} +
        find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|href='https://github.com/community-scripts/ProxmoxVE/discussions' target='_blank' rel='noopener noreferrer' style='text-decoration: none; color: #00617f;'>Discussions|href='https://t.me/samohosting_chats' target='_blank' rel='noopener noreferrer' style='text-decoration: none; color: #0088cc;'>ЧАТЫ|g' {} +
        find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|href='https://github.com/community-scripts/ProxmoxVE/issues' target='_blank' rel='noopener noreferrer' style='text-decoration: none; color: #00617f;'>Issues|href='https://www.youtube.com/@samohosting' target='_blank' rel='noopener noreferrer' style='text-decoration: none; color: #FF0000;'>YouTube|g' {} +
        find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|Copyright (c) 2021-2025 tteck /| community-scripts ORG|Copyright (c) 2021-2025 tteck /| community-scripts ORG /| samohoting.ru|g' {} +

        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|"${CREATING}${GN}${APP} setup has been successfully initialized!${CL}"|"${CREATING}${GN}${APP} Установка успешно завершена!${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|"${INFO}${YW} Access it using the following URL:${CL}"|"${INFO}${YW} Сервис доступен по ссылке URL:${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${CROSS}${RD} Menu aborted by user.${CL}"|echo -e "${CROSS}${RD} Меню отменено пользователем.${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "ID '$CTID' is already in use."|echo -e "ID '$CTID' уже занят другим контейнером."|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|exit "A problem occured while trying to create container."|exit "Возникла проблема при попытке создать контейнер!"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|exit "Cannot use ID that is already in use."|exit "Не могу использовать ID который уже занят другим контейнером."|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|exit "Unable to find a template when searching for '$TEMPLATE_SEARCH'."|exit "Не смог найти ШАБЛОН для '$TEMPLATE_SEARCH'."|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_error "No ${APP} Installation Found!"|msg_error "Отсутствует установленная версия ${APP}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_error "Ther is currently no automatic update function for ${APP}."|msg_error "Автообновления для ${APP} на текущий момент еще не существует."|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_error "Unable to detect a valid Container Storage location."|msg_error "Не удалось определить корректное расположение хранилища для контейнера"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_error "Unable to detect a valid Template Storage location."|msg_error "Не удалось определить корректное расположение хранилища для шаблона"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_info "Backing up conf.yml"|msg_info "Делаю резервную копию Вашего файла conf.yml"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_info "Cleaning Up"|msg_info "Провожу уборку. Удаляю временные файлы установки"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_info "Cleaning"|msg_info "Провожу уборку. Удаляю временные файлы установки"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_info "Creating LXC Container"|msg_info "Создаю LXC Контейнер"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_info "Downloading LXC Template"|msg_info "Скачиваю LXC Шаблон"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_info "Restoring assets directory"|msg_info "Происходит восстановление каталогов"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_info "Restoring conf.yml"|msg_info "Восстанавливаю из бекапа Ваш conf.yml"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_info "Starting|msg_info "Запускаю|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_info "Starting ${APP}"|msg_info "Запускается приложение ${APP}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_info "Stopping ${APP}"|msg_info "Останавливаю работу приложения ${APP}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_info "Updating ${APP} to ${RELEASE}"|msg_info "Обновляю ${APP} до ${RELEASE}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_info "Updating ${APP}"|msg_info "Обновляю ${APP}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_info "Updating |msg_info "Обновляю|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_info "Updating LXC Template List"|msg_info "Обновляю список LXC Шаблонов"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_info "Updating System"|msg_info "Обновляю систему"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_info "Validating Storage"|msg_info "Проверяю Хранилище"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_ok "Backed up conf.yml"|msg_ok "Забекапировал Ваш conf.yml"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_ok "Cleaned"|msg_ok "Все убрал, руки помыл. А не мытым трубочистам - стыд и срам(c)"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_ok "Cleanup Completed"|msg_ok "Все убрал, руки помыл. А не мытым трубочистам - стыд и срам(c)"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_ok "Completed Successfully!\\n"|msg_ok "Установка успешно завершена!\\n"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_ok "Downloaded LXC Template"|msg_ok "Скачиваю LXC Шаблон"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_ok "LXC Container ${BL}$CTID${CL} ${GN}was successfully created."|msg_ok "LXC Контейнер ${BL}$CTID${CL} ${GN}был успешно создан."|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_ok "No update required. ${APP} images are already at ${IMG_RELEASE}"|msg_ok "Обновление не требуется. ${APP} уже последней версии ${IMG_RELEASE}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_ok "No update required. ${APP} is already at ${RELEASE}"|msg_ok "Обновление не требуется. ${APP} уже последней версии ${RELEASE}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_ok "No update required. ${APP} is already at v${RELEASE}."|msg_ok "Обновление не требуется. ${APP} уже последней версии ${RELEASE}."|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_ok "No update required. Base ${APP} is already at ${RELEASE}"|msg_ok "Обновление не требуется. База приложение ${APP} уже последней версии ${RELEASE}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_ok "Restored assets directory"|msg_ok "Каталоги восстановлены"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_ok "Started|msg_ok "Запустил|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_ok "Started ${APP}"|msg_ok "Запущено приложение ${APP}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_ok "Started Dashy"|msg_ok "Стартую приложение Dashy"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_ok "Stopped ${APP}"|msg_ok "Приложение ${APP} остановлено"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_ok "Successfully Updated ${APP}"|msg_ok "Успешно обновлено ${APP}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_ok "Updated ${APP} to ${RELEASE}"|msg_ok "Приложение ${APP} обновлено до версии ${RELEASE}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_ok "Updated $APP LXC"|msg_ok "Обновлен Контейнер приложения $APP"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_ok "Updated LXC Template List"|msg_ok "Обновлен список LXC Шаблонов"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_ok "Updated PHP"|msg_ok "Обновлен PHP"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_ok "Updated Successfully"|msg_ok "Приложение успешно обновлено!"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_ok "Updated System"|msg_ok "Система обновлена"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_ok "Updating |msg_ok "Обновляю  |g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_ok "Using ${BL}$CONTAINER_STORAGE${CL} ${GN}for Container Storage."|msg_ok "Использую ${BL}$CONTAINER_STORAGE${CL} ${GN} для хранилища Контейнера."|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_ok "Using ${BL}$TEMPLATE_STORAGE${CL} ${GN}for Template Storage."|msg_ok "Использую ${BL}$TEMPLATE_STORAGE${CL} ${GN} для хранилища Шаблона."|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|You need to set 'CTID' variable.|Требуется задать переменную 'CTID'.|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|You need to set 'PCT_OSTYPE' variable.|Требуется задать переменную 'PCT_OSTYPE'.|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|backtitle "Proxmox VE Helper Scripts"|backtitle "Proxmox VE Helper Scripts : Samohosting Edition"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "SUPPORT"|title "ПОДДЕРЖКА"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|"Check for Alpine Updates"|"Проверка обновлений Alpine"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_error "There is currently no update path available."|msg_error "Обновления отсутствуют."|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_info "Installing Dependencies"|msg_info "Устанавливаю зависимости(необходимое ПО)"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_ok "Installed Dependencies"|msg_ok "Зависимости(необходимое ПО) установлено"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_info "Setting up Node.js Repository"|msg_info "Настраиваю Node.js Репозиторий"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_ok "Set up Node.js Repository"|msg_ok "Репозиторий Node.js настроен"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_info "Setting up PostgreSQL Repository"|msg_info "Настраиваю PostgreSQLРепозиторий"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_ok "Set up PostgreSQL Repository"|msg_ok "Репозиторий PostgreSQL настроен"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_info "Installing Node.js"|msg_info "Устанавливаю Node.js"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_ok "Installed Node.js"|msg_ok "Node.js установлен"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_info "Installing |msg_info "Устанавливаю |g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_info "Adding Additional Nextcloud Packages"|msg_info "добавляю дополнительные пакеты Некстклауд"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_ok "Added Additional Nextcloud Packages"|msg_ok "дополнительные пакеты Некстклауд добавлены"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_info "Start Nextcloud Setup-Wizard"|msg_info "Запускаю мастер-установки Некстклауд"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|error_message="${RD}[ERROR]${CL} in line ${RD}$line_number${CL}: exit code ${RD}$exit_code${CL}: while executing command ${YW}$command${CL}"|error_message="${RD}[ERROR]${CL} в строке ${RD}$line_number${CL}: exit code ${RD}$exit_code${CL}: во время выполнения команды ${YW}$command${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_error "Your default shell is currently not set to Bash. To use these scripts, please switch to the Bash shell."|msg_error "Ваша консоль(shell) по умолчанию не переключена на Bash. Для использования данного скрипта - пожалуйста переключите консоль на Bash."|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "\\nExiting..."|echo -e "\\nВыхожу..."|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msg_error "Please run this script as root."|msg_error "Пожалуйста запустите данный скрипт под пользователем root."|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "Requires Proxmox Virtual Environment Version 8.1 or later."|echo -e "Требуется Proxmox Virtual Environment версии 8.1 и выше."|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "\\n ${INFO}${YWB}This script will not work with PiMox! \\n"|echo -e "\\n ${INFO}${YWB}Этот скрипт не работает на PiMox! \\n"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's| echo -e "\\n ${YWB}Visit https://github.com/asylumexp/Proxmox for ARM64 support. \\n"| echo -e "\\n ${YWB}Для поддержки АРМ64 - читайте https://github.com/asylumexp/Proxmox  \\n"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${INFO}${BOLD}${DGN}Installing FIGlet...${CL}"|echo -e "${INFO}${BOLD}${DGN}Устанавливаю FIGlet(программа для вывода логотипа в консоль)...${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${CM}${BOLD}${DGN}FIGlet successfully installed.${CL}"|echo -e "${CM}${BOLD}${DGN}FIGlet успешно установлен.${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${ERR}${BOLD}${RED}Failed to install FIGlet.${CL}"|echo -e "${ERR}${BOLD}${RED}Не удалось установить FIGlet.${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${INFO}${BOLD}${DGN}FIGlet or the slant font is missing. Installing...${CL}"|echo -e "${INFO}${BOLD}${DGN}Отсутствуют шрифты FIGlet or the slant font. Добавляю...${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${ERR}${BOLD}${RED}Unsupported operating system.${CL}"|echo -e "${ERR}${BOLD}${RED}Текущая операционная система не поддерживается!.${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${INFO}${BOLD}${DGN}Downloading slant font...${CL}"|echo -e "${INFO}${BOLD}${DGN}Скачиваю шрифт slant...${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "SSH DETECTED"|title "Обнаружено подключение по SSH"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "Proceed using SSH"|title "Установка при подключении по SSH"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|yesno "It's advisable to utilize the Proxmox shell rather than SSH, as there may be potential complications with variable retrieval. Proceed using SSH?"|yesno "Настоятельно рекомендуется использовать консоль(shell) Proxmox вместо SSH, т.к. могут возникнуть ошибки. Продолжить используя SSH?"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "Proceed using SSH" "You've chosen to proceed using SSH. If any issues arise, please run the script in the Proxmox shell before creating a repository issue." |title "Установка при подключении по SSH" "Вы подтвердили продолжение установки с SSH подключением. Если у Вас возникнут ошибки - пожалуйста повторите установку в консоли(shell) Proxmox прежде, чем писать разработчикам о проблеме." |g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo "Exiting due to SSH usage. Please consider using the Proxmox shell."|echo "Выхожу в связи с использованием подключения по SSH. Пожалуйста рассмотрите возможность использовать для установки Proxmox shell."|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${OS}${BOLD}${DGN}Operating System: ${BGN}$var_os${CL}"|echo -e "${OS}${BOLD}${DGN}Операционная система: ${BGN}$var_os${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${OSVERSION}${BOLD}${DGN}Version: ${BGN}$var_version${CL}"|echo -e "${OSVERSION}${BOLD}${DGN}Версия: ${BGN}$var_version${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${CONTAINERTYPE}${BOLD}${DGN}Container Type: ${BGN}$CT_TYPE_DESC${CL}"|echo -e "${CONTAINERTYPE}${BOLD}${DGN}Тип контейнера: ${BGN}$CT_TYPE_DESC${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${DISKSIZE}${BOLD}${DGN}Disk Size: ${BGN}${DISK_SIZE}GB${CL}"|echo -e "${DISKSIZE}${BOLD}${DGN}Размер диска: ${BGN}${DISK_SIZE}GB${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${CPUCORE}${BOLD}${DGN}CPU Cores: ${BGN}${CORE_COUNT}${CL}"|echo -e "${CPUCORE}${BOLD}${DGN}Ядер процессора: ${BGN}${CORE_COUNT}${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${RAMSIZE}${BOLD}${DGN}RAM Size: ${BGN}${RAM_SIZE}MiB${CL}"|echo -e "${RAMSIZE}${BOLD}${DGN}Размер ОЗУ: ${BGN}${RAM_SIZE}MiB${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${CONTAINERID}${BOLD}${DGN}Container ID: ${BGN}${CT_ID}${CL}"|echo -e "${CONTAINERID}${BOLD}${DGN}ID Контейнера: ${BGN}${CT_ID}${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${SEARCH}${BOLD}${DGN}Verbose Mode: ${BGN}Enabled${CL}"|echo -e "${SEARCH}${BOLD}${DGN}Режим отладки: ${BGN}Enabled${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${CREATING}${BOLD}${BL}Creating a ${APP} LXC using the above default settings${CL}"|echo -e "${CREATING}${BOLD}${BL}Создаю контейнер с приложением ${APP} используя вышеуказанные базовые настройки${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "\\n${CROSS}${RD}User exited script${CL}\\n"|echo -e "\\n${CROSS}${RD}Выход из скрипта по инициативе пользователя${CL}\\n"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "Here is an instructional tip:" "To make a selection, use the Spacebar."|title "Подсказка по использованию:" "Чтобы сделать выбор - используйте ПРОБЕЛ."|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "Default distribution for $APP" "${var_os} ${var_version} \\n \\nIf the default Linux distribution is not adhered to, script support will be discontinued.|title "Дистрибутив по умолчанию для приложения $APP" "${var_os} ${var_version} \\n \\nIf используеммый дистрибутив Linux отличается от рекомендованного , поддержка скрипта невозможна.|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "DISTRIBUTION"|title "ДИСТРИБУТИВ"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|radiolist "Choose Distribution:"|radiolist "Выберите дистрибутив :"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "DEBIAN VERSION"|title "ВЕРСИЯ DEBIAN"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|radiolist "Choose Version"|radiolist "Выберите версию"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "UBUNTU VERSION"|title "ВЕРСИЯ UBUNTU"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|TAGS="community-script;${var_tags:-}"|TAGS="samohosting;${var_tags:-}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "CONTAINER TYPE"|title "ТИП КОНТЕЙНЕРА"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|radiolist "Choose Type"|radiolist "Выберите Тип"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|passwordbox "\\nSet Root Password (needed for root ssh access)"|passwordbox "\\nЗадайте пароль для root (необходим для root ssh доступа)"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "PASSWORD (leave blank for automatic login)"|title "ПАРОЛЬ (оставьте пустым для автологина)"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msgbox "Password cannot contain spaces. Please try again.|msgbox "Пароль не может содержать пробелы. Повторите попытку.|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msgbox "Password must be at least 5 characters long. Please try again."|msgbox "Минимальная длина пароля = 5 символов. Повторите попытку."|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|passwordbox "\\nVerify Root Password"|passwordbox "\\nПодтвердите паролья для root"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "PASSWORD VERIFICATION"|title "ПОДТВЕРЖДЕНИЕ ПАРОЛЯ"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${VERIFYPW}${BOLD}${DGN}Root Password: ${BGN}********${CL}"|echo -e "${VERIFYPW}${BOLD}${DGN}ПАРОЛЬ ДЛЯ ROOT: ${BGN}********${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msgbox "Passwords do not match. Please try again."|msgbox "Пароли не совпадают. Повторите попытку."|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|inputbox "Set Container ID"|inputbox "Укажите ID контейнера"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "CONTAINER ID"|title "ID КОНТЕЙНЕРА"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${CONTAINERID}${BOLD}${DGN}Container ID: ${BGN}$CT_ID${CL}"|echo -e "${CONTAINERID}${BOLD}${DGN}ID Контейнера: ${BGN}$CT_ID${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|inputbox "Set Hostname"|inputbox "Укажите имя хоста(hostname)"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "HOSTNAME"|title "ИМЯ ХОСТА(HOSTNAME)"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${HOSTNAME}${BOLD}${DGN}Hostname: ${BGN}$HN${CL}"|echo -e "${HOSTNAME}${BOLD}${DGN}Имя хоста(hostname): ${BGN}$HN${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|inputbox "Set Disk Size in GB"|inputbox "Укажите размер диска в GB"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "DISK SIZE"|title "РАЗМЕР ДИСКА"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "{INFO}${HOLD}${RD} DISK SIZE MUST BE AN INTEGER NUMBER!${CL}"|echo -e "{INFO}${HOLD}${RD} РАЗМЕР ДИСКА ДОЛЖЕН БЫТЬ УКАЗАН ЧИСЛОМ!${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|inputbox "Allocate CPU Cores"|inputbox "Укажите кол-во процессорных ядер(CPU count)"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "CORE COUNT"|title "КОЛИЧЕСТВО ПРОЦЕССОРНЫХ ЯДЕР(CPU COUNT)"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${CPUCORE}${BOLD}${DGN}CPU Cores: ${BGN}$CORE_COUNT${CL}"|echo -e "${CPUCORE}${BOLD}${DGN}Процессорных ядер: ${BGN}$CORE_COUNT${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|inputbox "Allocate RAM in MiB"|inputbox "Укажите ОЗУ в MiB"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "RAM"|title "ОЗУ"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|inputbox "Set a Bridge"|inputbox "Укажите сетевой мост(bridge)"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "BRIDGE"|title "СЕТЕВОЙ МОСТ(BRIDGE)"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${BRIDGE}${BOLD}${DGN}Bridge: ${BGN}$BRG${CL}"|echo -e "${BRIDGE}${BOLD}${DGN}Сетевой мост(bridge): ${BGN}$BRG${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|inputbox "Set a Static IPv4 CIDR Address (/24)"|inputbox "Укажите статичный IPv4 CIDR адрес (/24)"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "IP ADDRESS"|title "IP АДРЕС"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${NETWORK}${BOLD}${DGN}IP Address: ${BGN}$NET${CL}"|echo -e "${NETWORK}${BOLD}${DGN}IP адрес: ${BGN}$NET${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msgbox "$NET is an invalid IPv4 CIDR address. Please enter a valid IPv4 CIDR address or 'dhcp'"|msgbox "$NET - невалидный IPv4 CIDR адрес. Пожалуйста укажите валидный IPv4 CIDR адрес или 'dhcp'"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|inputbox "Enter gateway IP address"|inputbox "Укажите IP адрес шлюза по умолчанию(gateway)"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "Gateway IP"|title "IP АДРЕС ШЛЮЗА(Gateway IP)"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msgbox "Gateway IP address cannot be empty"|msgbox "Поле IP шлюза не может быть пустым"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|msgbox "Invalid IP address format"|msgbox "Неверный формат IP адреса"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${GATEWAY}${BOLD}${DGN}Gateway IP Address: ${BGN}$GATE1${CL}"|echo -e "${GATEWAY}${BOLD}${DGN}IP Шлюза(Gateway IP): ${BGN}$GATE1${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${GATEWAY}${BOLD}${DGN}Gateway IP Address: ${BGN}Default${CL}"|echo -e "${GATEWAY}${BOLD}${DGN}IP Шлюза(Gateway IP): ${BGN}Default${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|inputbox "Set APT-Cacher IP (leave blank for default)"|inputbox "Укажите IP адрес кеширующий прокси-сервер(APT-Cacher) (оставьте пустым для использования параметров по умолчанию)"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "APT-Cacher IP"|title "IP КЕШИРУЮЩЕГО ПРОКСИ-СЕРВЕРА(APT-Cacher)"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${NETWORK}${BOLD}${DGN}APT-Cacher IP Address: ${BGN}${APT_CACHER_IP:-Default}${CL}"|echo -e "${NETWORK}${BOLD}${DGN}IP адрес кеширующий прокси-сервер(APT-Cacher): ${BGN}${APT_CACHER_IP:-Default}${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "IPv6" --yesno "Disable IPv6?"|title "IPv6" --yesno "Отключить IPv6?"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${DISABLEIPV6}${BOLD}${DGN}Disable IPv6: ${BGN}$DISABLEIP6${CL}"|echo -e "${DISABLEIPV6}${BOLD}${DGN}Отключить IPv6: ${BGN}$DISABLEIP6${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|inputbox "Set Interface MTU Size (leave blank for default)"|inputbox "Set Interface MTU Size (оставьте пустым для использования параметров по умолчанию)"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${DEFAULT}${BOLD}${DGN}Interface MTU Size: ${BGN}$MTU1${CL}"|echo -e "${DEFAULT}${BOLD}${DGN}Interface MTU Size: ${BGN}$MTU1${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|inputbox "Set a DNS Search Domain (leave blank for HOST)"|inputbox "Set a DNS Домен поиска(оставьте пустым для использования HOST)"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "MTU SIZE"|title "MTU SIZE"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "DNS Search Domain"|title "DNS Домен поиска"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${SEARCH}${BOLD}${DGN}DNS Search Domain: ${BGN}$SX${CL}"|echo -e "${SEARCH}${BOLD}${DGN}DNS Домен поиска: ${BGN}$SX${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|inputbox "Set a DNS Server IP (leave blank for HOST)"|inputbox "Укажите IP адрес DNS сервера (оставьте пустым для использования HOST)"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "DNS SERVER IP"|title "IP АДРЕС DNS СЕРВЕРА"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${NETWORK}${BOLD}${DGN}DNS Server IP Address: ${BGN}$NX${CL}"|echo -e "${NETWORK}${BOLD}${DGN}IP адрес DNS сервера: ${BGN}$NX${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|inputbox "Set a MAC Address(leave blank for default)"|inputbox "Укажите MAC адрес(оставьте пустым для использования параметров по умолчанию)"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "MAC ADDRESS"|title "MAC АДРЕС"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${MACADDRESS}${BOLD}${DGN}MAC Address: ${BGN}$MAC1${CL}"|echo -e "${MACADDRESS}${BOLD}${DGN}MAC адрес: ${BGN}$MAC1${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|inputbox "Set a Vlan(leave blank for default)"|inputbox "Укажите Vlan(оставьте пустым для использования параметров по умолчанию)"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "VLAN"|title "VLAN"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${VLANTAG}${BOLD}${DGN}Vlan: ${BGN}$VLAN1${CL}"|echo -e "${VLANTAG}${BOLD}${DGN}Vlan: ${BGN}$VLAN1${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "SSH ACCESS"|title "SSH ДОСТУП"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|yesno "Enable Root SSH Access?"|yesno "Разрешить доступ Root по SSH?"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${ROOTSSH}${BOLD}${DGN}Root SSH Access: ${BGN}$SSH${CL}"|echo -e "${ROOTSSH}${BOLD}${DGN}Доступ Root по SSH: ${BGN}$SSH${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "VERBOSE MODE"|title "РЕЖИМ ОТЛАДКИ"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|yesno "Enable Verbose Mode?"|yesno "Включить режим отладки?(видно каждый этап установки и больше деталей, полезно для поиска ошибок)"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "ADVANCED SETTINGS COMPLETE"|title "РАСШИРЕННЫЕ НАСТРОЙКИ ЗАВЕРШЕНЫ"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|yesno "Ready to create ${APP} LXC?"|yesno "Приступить к созданию ${APP} LXC?"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${CREATING}${BOLD}${RD}Creating a ${APP} LXC using the above advanced settings${CL}"|echo -e "${CREATING}${BOLD}${RD}Создаю ${APP} LXC используя вышеуказанные расширенные настройки${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${ADVANCED}${BOLD}${RD}Using Advanced Settings on node $PVEHOST_NAME${CL}"|echo -e "${ADVANCED}${BOLD}${RD}Использую расширенные настройки для node $PVEHOST_NAME${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "SETTINGS"|title "НАСТРОЙКИ"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|menu "Choose an option:"|menu "Выберите одну из опций:"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|1 "Default Settings"|1 "Настройки по умолчанию"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|2 "Default Settings (with verbose)"|2 "Настройки по умолчанию (режим отладки)"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|3 "Advanced Settings"|3 "Расширенные настройки"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|4 "Exit"|4 "Выход"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${CROSS}${RD} Menu canceled. Exiting.${CL}"|echo -e "${CROSS}${RD} Действие(меню) отменено. Выхожу.${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${DEFAULT}${BOLD}${BL}Using Default Settings on node $PVEHOST_NAME${CL}"|echo -e "${DEFAULT}${BOLD}${BL}Использую базовые настройки для node $PVEHOST_NAME${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${DEFAULT}${BOLD}${BL}Using Default Settings on node $PVEHOST_NAME (${SEARCH}${BL}Verbose)${CL}"|echo -e "${DEFAULT}${BOLD}${BL}Использую базовые настройки для node $PVEHOST_NAME (${SEARCH}${BL}Verbose)${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${CROSS}${RD}Exiting.${CL}"|echo -e "${CROSS}${RD}Выхожу.${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${CROSS}${RD}Invalid option, please try again.${CL}"|echo -e "${CROSS}${RD}Неверная опция, повторите попытку.${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "\\n${INFO}${HOLD} ${GN}Required: ${var_cpu} CPU, ${var_ram}MB RAM ${CL}| ${RD}Current: ${current_cpu} CPU, ${current_ram}MB RAM${CL}"|echo -e "\\n${INFO}${HOLD} ${GN}Требуется: ${var_cpu} CPU, ${var_ram}MB ОЗУ ${CL}| ${RD}Доступно сейчас: ${current_cpu} CPU, ${current_ram}MB ОЗУ${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${YWB}Please ensure that the ${APP} LXC is configured with at least ${var_cpu} vCPU and ${var_ram} MB RAM for the build process.${CL}\\n"|echo -e "${YWB}Пожалуйста убедитесь, что ${APP} LXC сконфигурирован хотя бы с ${var_cpu} vCPU и ${var_ram} MB ОЗУ для процесса сборки\установки.${CL}\\n"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|read -r -p "${INFO}${HOLD} May cause data loss! ${INFO} Continue update with under-provisioned LXC? <yes/No>  " prompt|read -r -p "${INFO}${HOLD}Может привести к потери данных! ${INFO} Продолжить обнволение LXC с недостаточными ресурсами системы? <yes/No>  " prompt|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${CROSS}${HOLD} ${YWB}Exiting based on user input.${CL}"|echo -e "${CROSS}${HOLD} ${YWB}Выхожу по инициативе пользователя.${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${INFO}${HOLD} ${YWB}Warning: Storage is dangerously low (${usage}%).${CL}"|echo -e "${INFO}${HOLD} ${YWB}ВНИМАНИЕ!: критически мало свободного места (${usage}%).${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|read -r -p "Continue anyway? <y/N>  " prompt|read -r -p "Продолжить в любом случае? <y/N>  " prompt|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|echo -e "${CROSS}${HOLD}${YWB}Exiting based on user input.${CL}"|echo -e "${CROSS}${HOLD}${YWB}Выхожу по инициативе пользователя.${CL}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|yesno "This will create a New ${APP} LXC. Proceed?"|yesno "Создать новый контейнер ${APP}. Продолжить?"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|title "${APP} LXC UPDATE"|title "ОБНОВЛЕНИЕ КОНТЕЙНЕРА ${APP}"|g' {} +
        # find ./ -type f \(  -name "*.sh" -o -name "*.func" -o -name "LICENSE" \) -exec sed -i 's|yesno "Support/Update functions for ${APP} LXC.  Proceed?"|yesno "Запустить обновление\функцию поддержки для  ${APP} LXC.  Продолжить?"|g' {} +
        
        echo "info: translation done"
        git add . && echo "info: DONE add . $(date +'%Y-%m-%d %H:%M:%S')"
        git commit -m "repo was translated en2ru by workflow: $(date +'%Y-%m-%d %H:%M:%S')" && echo "info: Committed changes $(date +'%Y-%m-%d %H:%M:%S')"
        git push -u samohosting-scripts ru_dev:ru_dev && echo "info: pushed translated repo en2ru by workflow $(date +'%Y-%m-%d %H:%M:%S')"
